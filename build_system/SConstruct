#!/usr/bin/env python3
"""
SCons-based Build System for Godot Examples Documentation
=========================================================

This build system provides:
- Smart dependency tracking
- Parallel processing with optimal job scheduling  
- Build caching for faster incremental builds
- Cross-platform compatibility  
- Real-time progress monitoring

Usage:
    scons                    # Build all targets
    scons --dry-run         # Show what would be built
    scons --progress        # Show real-time progress
    scons build             # Build game exports only
    scons docs              # Build documentation only
    scons final             # Build final docs with embeds

Examples:
    scons -j8               # Use 8 parallel jobs
    scons --projects-dir=../godot-demo-projects
    scons --godot-binary=/path/to/godot
"""

import os
import sys
import multiprocessing
from pathlib import Path

# Import SCons functionality
from SCons.Script import *  # type: ignore[reportWildcardImportFromLibrary]

# Add build system modules to path
build_system_path = os.path.dirname(os.path.abspath(__file__ if '__file__' in globals() else 'SConstruct'))
if build_system_path not in sys.path:
    sys.path.insert(0, build_system_path)

# Try to import custom modules with graceful fallback
MODULES_AVAILABLE = False
try:
    from tools.progress_reporter import get_progress_reporter
    from tools.dependency_checker import check_dependencies
    MODULES_AVAILABLE = True
    print("✅ Build system modules loaded successfully")
except ImportError as e:
    print(f"⚠️  Build system modules not available: {e}")
    print("   Using basic SCons functionality")
    
    # Fallback dependency check function
    def check_dependencies(auto_install: bool = False) -> bool:
        """Fallback dependency checker when module is not available"""
        print("⚠️  Dependency checking not available")
        return True


# Command line options
AddOption('--projects-dir',
          dest='projects_dir',
          type='string',
          nargs=1,
          action='store',
          metavar='DIR',
          default='godot-demo-projects',
          help='Directory containing Godot projects')

AddOption('--build-mode',
          dest='build_mode',
          type='string',
          nargs=1,
          action='store',
          metavar='MODE',
          default='release',
          help='Build mode: debug or release')

AddOption('--progress',
          dest='show_progress',
          action='store_true',
          help='Show real-time build progress')

AddOption('--preview',
          dest='preview',
          action='store_true',
          help='Show what would be built without building')

AddOption('--godot-binary',
          dest='godot_binary',
          type='string',
          nargs=1,
          action='store',
          metavar='PATH',
          default='godot',
          help='Path to Godot binary')


def create_environment():
    """Create the main SCons environment"""
    
    # Base environment
    env = Environment(
        tools=['default'],
        ENV=os.environ.copy()
    )
    
    # Configure from command line options
    build_system_dir = Path(__file__ if '__file__' in globals() else '.').parent.absolute()
    workspace_dir = build_system_dir.parent
    projects_dir_rel = GetOption('projects_dir')
    
    # Make projects directory absolute
    if not os.path.isabs(projects_dir_rel):
        env['PROJECTS_DIR'] = str(workspace_dir / projects_dir_rel)
    else:
        env['PROJECTS_DIR'] = projects_dir_rel
    
    env['BUILD_MODE'] = GetOption('build_mode')
    env['GODOT_BINARY'] = GetOption('godot_binary')
    env['VERBOSE'] = GetOption('show_progress') or ARGUMENTS.get('verbose', '0') == '1'
    
    # Build directories
    env['BUILD_DIR'] = 'build'
    env['DOCS_DIR'] = 'docs'
    env['FINAL_DOCS_DIR'] = 'final_docs'
    env['CACHE_DIR'] = '.scons_cache'
    
    # Setup caching
    if not GetOption('preview'):
        cache_dir = env['CACHE_DIR']
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)
        CacheDir(cache_dir)
    
    # Configure parallel jobs
    num_jobs = multiprocessing.cpu_count() - 1 if multiprocessing.cpu_count() > 1 else 1
    SetOption('num_jobs', num_jobs)
    
    # Print configuration
    if env['VERBOSE']:
        print("🚀 SCons Build System for Godot Examples")
        print("=" * 50)
        print(f"📁 Projects Directory: {env['PROJECTS_DIR']}")
        print(f"🏗️  Build Mode: {env['BUILD_MODE']}")
        print(f"🎮 Godot Binary: {env['GODOT_BINARY']}")
        print(f"⚙️  Parallel Jobs: {num_jobs}")
        print(f"💾 Cache Directory: {env['CACHE_DIR']}")
        print("=" * 50)
    
    return env


def find_godot_projects(projects_dir):
    """Find all Godot projects in the directory"""
    projects_path = Path(projects_dir)
    
    if not projects_path.exists():
        print(f"❌ Projects directory not found: {projects_dir}")
        return []
    
    # Find all project.godot files
    project_files = []
    for project_file in projects_path.rglob('project.godot'):
        # Skip certain directories
        project_dir = project_file.parent
        skip_dirs = {'.git', 'build', 'export', '.godot', '.import', '.scons_cache'}
        
        if not any(skip in project_dir.parts for skip in skip_dirs):
            project_files.append(project_file)
    
    return sorted(project_files)


def create_basic_targets(env, project_files):
    """Create basic build targets when custom modules are not available"""
    targets = []
    
    for project_file in project_files:
        # Build exports directly in each project's directory
        project_dir = project_file.parent
        export_dir = project_dir / 'exports' / 'web'
        export_path = export_dir / 'index.html'
        
        # Create export command with proper paths
        export_target = env.Command(
            target=str(export_path),
            source=str(project_file),
            action=[
                Mkdir(str(export_dir)),
                f'cd "{project_dir}" && {env["GODOT_BINARY"]} --headless --export-release "web" "{export_path.absolute()}"'
            ]
        )
        targets.extend(export_target)
    
    return targets


def main_build():
    """Main build function"""
    
    # Create environment
    env = create_environment()
    
    # Find Godot projects
    projects_dir = env['PROJECTS_DIR']
    project_files = find_godot_projects(projects_dir)
    
    if not project_files:
        print(f"❌ No Godot projects found in: {projects_dir}")
        Exit(1)
    
    print(f"📦 Found {len(project_files)} Godot projects")
    
    # Create build targets
    all_targets = []
    export_targets = []
    
    # Use basic build system
    print("⚠️  Using basic build system (limited functionality)")
    basic_targets = create_basic_targets(env, project_files)
    all_targets.extend(basic_targets)
    export_targets = basic_targets
    
    if not all_targets:
        print("❌ No build targets created")
        Exit(1)
    
    # Create aliases
    env.Alias('build', export_targets)
    env.Alias('export', export_targets)
    env.Alias('docs', export_targets)  # For now, same as export
    env.Alias('final', all_targets)
    env.Alias('all', all_targets)
    
    # Set default target
    Default('all')
    
    # Handle preview mode
    if GetOption('preview'):
        print(f"\n🔍 Build Plan ({len(all_targets)} targets):")
        for i, target in enumerate(all_targets[:20]):  # Show first 20
            print(f"   {i+1:2d}. {os.path.basename(str(target))}")
        if len(all_targets) > 20:
            print(f"       ... and {len(all_targets) - 20} more targets")
        print(f"\n💡 Run 'scons' to execute the build")
        print(f"💡 Run 'scons build' to build exports only")
        print(f"💡 Run 'scons docs' to build documentation only")
        return
    
    # Initialize progress tracking
    if MODULES_AVAILABLE and GetOption('show_progress'):
        reporter = get_progress_reporter()
        reporter.start_build(len(all_targets))
        print("📊 Progress tracking enabled")
    
    print(f"🎯 Ready to build {len(all_targets)} targets")


# Execute main build
main_build()
