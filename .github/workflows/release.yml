name: 🏷️ Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'

env:
  GODOT_VERSION: "4.3"
  PYTHON_VERSION: "3.11"

jobs:
  build-release:
    name: 🚀 Build Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        uses: lihop/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          export-templates: true

      - name: Build all projects
        run: |
          echo "🏗️ Building all Godot projects for release..."
          
          python build_system/scons_build.py \
            --projects-dir godot-demo-projects \
            --godot-binary godot \
            --jobs 4 \
            --force-rebuild \
            --verbose

      - name: Generate comprehensive documentation
        run: |
          echo "📚 Generating release documentation..."
          
          # Generate documentation
          python build_system/builders/docs_generator.py
          
          # Inject embeds
          python build_system/builders/embed_injector.py
          
          # Create comprehensive statistics
          python -c "
          from pathlib import Path
          import json
          from datetime import datetime
          
          # Collect statistics
          projects = list(Path('godot-demo-projects').rglob('project.godot'))
          exports = list(Path('godot-demo-projects').rglob('exports/web/index.html'))
          wasm_files = list(Path('godot-demo-projects').rglob('exports/**/*.wasm'))
          
          total_size = sum(f.stat().st_size for f in wasm_files if f.exists())
          
          stats = {
              'release_tag': '${{ steps.get_tag.outputs.tag_name }}',
              'build_date': datetime.now().isoformat(),
              'godot_version': '${{ env.GODOT_VERSION }}',
              'total_projects': len(projects),
              'exported_projects': len(exports),
              'total_wasm_size_mb': round(total_size / (1024*1024), 2),
              'categories': {}
          }
          
          # Categorize projects
          for project_file in projects:
              project_dir = project_file.parent
              category = project_dir.parts[1] if len(project_dir.parts) > 1 else 'misc'
              
              if category not in stats['categories']:
                  stats['categories'][category] = 0
              stats['categories'][category] += 1
          
          # Save statistics
          with open('build_statistics.json', 'w') as f:
              json.dump(stats, f, indent=2)
          
          # Generate release notes
          with open('RELEASE_NOTES.md', 'w') as f:
              f.write(f'# Godot Examples Documentation {stats[\"release_tag\"]}\\n\\n')
              f.write(f'Built on {stats[\"build_date\"]} with Godot {stats[\"godot_version\"]}\\n\\n')
              f.write(f'## 📊 Statistics\\n\\n')
              f.write(f'- **Total Projects**: {stats[\"total_projects\"]}\\n')
              f.write(f'- **Exported Projects**: {stats[\"exported_projects\"]}\\n')
              f.write(f'- **Total WASM Size**: {stats[\"total_wasm_size_mb\"]} MB\\n\\n')
              f.write(f'## 📂 Categories\\n\\n')
              for category, count in sorted(stats[\"categories\"].items()):
                  f.write(f'- **{category.upper()}**: {count} projects\\n')
              f.write(f'\\n## 🎮 Interactive Examples\\n\\n')
              f.write(f'All {stats[\"exported_projects\"]} exported projects are available as interactive web demos.\\n')
          
          print(f'Generated statistics for {len(projects)} projects')
          "

      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          
          # Create a clean release directory
          mkdir -p release
          
          # Copy documentation site
          cp index.html _sidebar.md README.md DOCS.md release/
          
          # Copy all exports
          find godot-demo-projects -path "*/exports/*" -type f | while read file; do
            rel_path="${file#godot-demo-projects/}"
            dest_dir="release/examples/$(dirname "$rel_path")"
            mkdir -p "$dest_dir"
            cp "$file" "$dest_dir/"
          done
          
          # Copy build system
          cp -r build_system release/
          cp requirements.txt build.sh release/
          
          # Copy statistics and release notes
          cp build_statistics.json RELEASE_NOTES.md release/
          
          # Create archive
          tar -czf godot-examples-documentation-${{ steps.get_tag.outputs.tag_name }}.tar.gz -C release .
          
          echo "Release archive created: $(ls -lh *.tar.gz)"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: Godot Examples Documentation ${{ steps.get_tag.outputs.tag_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag_name, 'alpha') || contains(steps.get_tag.outputs.tag_name, 'beta') || contains(steps.get_tag.outputs.tag_name, 'rc') }}

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./godot-examples-documentation-${{ steps.get_tag.outputs.tag_name }}.tar.gz
          asset_name: godot-examples-documentation-${{ steps.get_tag.outputs.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload build statistics
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build_statistics.json
          asset_name: build_statistics.json
          asset_content_type: application/json

  deploy-release:
    name: 🌐 Deploy Release to Pages
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Download release archive
        run: |
          # Download the release archive
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.build-release.outputs.tag_name }}" \
            | jq -r '.assets[] | select(.name | contains(".tar.gz")) | .browser_download_url' \
            | xargs curl -L -o release.tar.gz
          
          # Extract for deployment
          mkdir -p site
          tar -xzf release.tar.gz -C site

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, deploy-release]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🏷️ Release ${{ needs.build-release.outputs.tag_name }} Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-release.result }} | All projects built and archived |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy-release.result }} | GitHub Pages deployment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-release.result }}" == "success" ] && [ "${{ needs.deploy-release.result }}" == "success" ]; then
            echo "🎉 **Release ${{ needs.build-release.outputs.tag_name }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📁 **Release assets**: [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-release.outputs.tag_name }})" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Live documentation**: [View on GitHub Pages](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release failed.** Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
