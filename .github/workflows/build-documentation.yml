name: 🎮 Build Godot Examples Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all projects'
        required: false
        default: false
        type: boolean
      godot_version:
        description: 'Godot version to use for building'
        required: false
        default: '4.5-beta1'
        type: string

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5-beta1' }}
  GODOT_VERSION_STABLE: ${{ github.event.inputs.godot_version || '4.5-beta1' }}
  PYTHON_VERSION: "3.11"

jobs:
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      build-needed: ${{ steps.changes.outputs.build-needed }}
      projects-changed: ${{ steps.changes.outputs.projects-changed }}
      docs-changed: ${{ steps.changes.outputs.docs-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          submodules: true

      - name: Initialize and update submodules
        run: |
          echo "📦 Ensuring submodules are properly initialized..."
          git submodule update --init --recursive --depth 1

      - name: Detect changes
        id: changes
        run: |
          echo "🔍 Checking for changes that require rebuilding..."
          
          # Force rebuild if requested
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🔄 Force rebuild requested"
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "projects-changed=true" >> $GITHUB_OUTPUT
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for changes in project files or documentation
          if git diff --name-only HEAD~1 HEAD | grep -E "(godot-demo-projects|build_system|\.py$|\.sh$|\.yml$|\.md$|index\.html)" > /dev/null; then
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "projects-changed=true" >> $GITHUB_OUTPUT
            echo "docs-changed=true" >> $GITHUB_OUTPUT
          else
            echo "build-needed=false" >> $GITHUB_OUTPUT
            echo "projects-changed=false" >> $GITHUB_OUTPUT
            echo "docs-changed=false" >> $GITHUB_OUTPUT
          fi

  build-complete:
    name: 🏗️ Build Projects & Documentation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-needed == 'true' || needs.detect-changes.outputs.docs-changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Clean any existing export artifacts
        run: |
          echo "🧹 Cleaning existing export artifacts from submodules..."
          find godot-demo-projects -name "exports" -type d -exec rm -rf {} + 2>/dev/null || true
          find godot-demo-projects -name "*.wasm" -delete 2>/dev/null || true
          find godot-demo-projects -name "*.pck" -delete 2>/dev/null || true
          echo "Cleaned export artifacts to ensure fresh build"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        run: |
          echo "🎮 Setting up Godot Engine ${GODOT_VERSION}..."
          
          # Calculate the correct template version format
          if [[ "${GODOT_VERSION}" == *"-beta"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-beta/.beta}"
          elif [[ "${GODOT_VERSION}" == *"-alpha"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-alpha/.alpha}"
          elif [[ "${GODOT_VERSION}" == *"-rc"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-rc/.rc}"
          else
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION}"
          fi
          
          echo "📋 Template version format: ${GODOT_TEMPLATE_VERSION}"
          
          # Download URLs based on version type
          if [[ "${GODOT_VERSION}" == *"beta"* ]] || [[ "${GODOT_VERSION}" == *"alpha"* ]] || [[ "${GODOT_VERSION}" == *"rc"* ]]; then
            GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
            TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_export_templates.tpz"
          else
            GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip"
            TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
          fi
          
          # Download and install Godot
          echo "📥 Downloading Godot ${GODOT_VERSION}..."
          echo "🔗 URL: ${GODOT_URL}"
          wget -q "${GODOT_URL}" -O godot.zip
          unzip -q godot.zip
          chmod +x Godot_v${GODOT_VERSION}_linux.x86_64
          sudo mv Godot_v${GODOT_VERSION}_linux.x86_64 /usr/local/bin/godot
          
          # Download and install export templates
          echo "📥 Downloading export templates..."
          echo "🔗 Templates URL: ${TEMPLATES_URL}"
          wget -q "${TEMPLATES_URL}" -O export_templates.tpz
          
          # Create templates directory with correct structure
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}
          
          # Extract templates to temporary location first
          echo "📦 Extracting export templates..."
          unzip -q export_templates.tpz -d temp_templates/
          
          echo "🔍 Debug: Checking what was extracted..."
          echo "Contents of temp_templates:"
          ls -la temp_templates/
          
          # Determine source directory
          if [ -d "temp_templates/templates" ]; then
            TEMPLATES_SOURCE="temp_templates/templates"
            echo "📁 Found templates in templates/ subdirectory"
          else
            TEMPLATES_SOURCE="temp_templates"
            echo "📁 Templates are in root directory"
          fi
          
          # Copy templates to correct location
          echo "📦 Installing templates to ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/"
          
          # For web templates, they need to stay as ZIP files
          # Copy web template ZIP files directly
          for web_template in ${TEMPLATES_SOURCE}/web*.zip; do
            if [ -f "$web_template" ]; then
              cp "$web_template" ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
              echo "📦 Copied $(basename $web_template)"
            fi
          done
          
          # For other templates, copy as-is (they might be executables or other zip files)
          for template in ${TEMPLATES_SOURCE}/*; do
            if [ -f "$template" ] && [[ ! "$(basename $template)" == web*.zip ]]; then
              cp "$template" ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
              echo "📦 Copied $(basename $template)"
            fi
          done
          
          # Check version.txt to confirm template version
          echo "🔍 Checking template version..."
          VERSION_FILE="~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            echo "Found version.txt:"
            cat "$VERSION_FILE"
          else
            echo "No version.txt found, creating one..."
            echo "${GODOT_TEMPLATE_VERSION}" > ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/version.txt
          fi
          
          # Cleanup
          rm -rf temp_templates/ godot.zip export_templates.tpz
          
          echo "✅ Godot setup completed"
          godot --version
          
          echo "🔍 Verifying export templates..."
          echo "Template directory structure:"
          ls -la ~/.local/share/godot/export_templates/
          echo "Contents of ${GODOT_TEMPLATE_VERSION} directory:"
          ls -la ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
          
          echo "🔍 Searching for web templates specifically:"
          find ~/.local/share/godot/export_templates/ -name "*web*" -o -name "*html*" || echo "No web templates found"
          
          echo "🔍 Specifically checking for required web export ZIP files:"
          echo "Template directory: $HOME/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/"
          echo "Files in template directory:"
          ls -la "$HOME/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/" | grep "web.*\.zip"
          
          for required_web_template in "web_nothreads_debug.zip" "web_nothreads_release.zip" "web_debug.zip" "web_release.zip"; do
            template_path="$HOME/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/${required_web_template}"
            if [ -f "$template_path" ]; then
              echo "✅ Found: $required_web_template"
            else
              echo "❌ Missing: $required_web_template"
            fi
          done

      - name: Validate Godot export templates
        run: |
          echo "🧪 Testing Godot export template functionality..."
          
          # Create a minimal test project
          mkdir -p test_project
          cd test_project
          
          # Create a minimal project.godot file
          cat > project.godot << 'EOF'
          [application]
          
          config/name="Test Project"
          config/version="1.0"
          
          [rendering]
          
          renderer/rendering_method="gl_compatibility"
          EOF
          
          # Create export preset
          cat > export_presets.cfg << 'EOF'
          [preset.0]
          
          name="Web"
          platform="Web"
          runnable=true
          dedicated_server=false
          custom_features=""
          export_filter="all_resources"
          export_path="test.html"
          
          [preset.0.options]
          
          custom_template/debug=""
          custom_template/release=""
          variant/extensions_support=false
          vram_texture_compression/for_desktop=true
          vram_texture_compression/for_mobile=false
          html/export_icon=true
          html/custom_html_shell=""
          html/head_include=""
          html/canvas_resize_policy=2
          html/focus_canvas_on_start=true
          html/experimental_virtual_keyboard=false
          progressive_web_app/enabled=false
          progressive_web_app/offline_page=""
          progressive_web_app/display=1
          progressive_web_app/orientation=0
          progressive_web_app/icon_144x144=""
          progressive_web_app/icon_180x180=""
          progressive_web_app/icon_512x512=""
          progressive_web_app/background_color=Color(0, 0, 0, 1)
          EOF
          
          # Test if Godot can list export templates
          echo "📋 Available export templates:"
          godot --headless --quit --list-export-templates || echo "Could not list export templates"
          
          # Try to validate export setup by checking if we can export
          echo "🎯 Testing web export capability..."
          godot --headless --export-debug "Web" test.html --quit 2>&1 | tee export_test.log || echo "Export test completed with warnings/errors"
          
          # Check if the export generated any files
          echo "🔍 Files generated by export test:"
          ls -la
          
          # Clean up test project
          cd ..
          rm -rf test_project/
          
          echo "✅ Export template validation completed"

      - name: Build all projects
        run: |
          echo "🏗️ Building all Godot projects with optimized settings..."
          
          # Use build system to export all projects
          python build_system/scons_build.py \
            --projects-dir godot-demo-projects \
            --export-type web \
            --parallel-jobs 4 \
            --godot-version ${{ env.GODOT_VERSION }} \
            --max-parallel-processes 8 \
            --verbose

      - name: Generate documentation
        run: |
          echo "📚 Generating documentation and sidebar..."
          
          # Generate documentation, sidebar, and inject embeds
          python build_system/scons_build.py \
            --generate-docs \
            --projects-dir godot-demo-projects \
            --docs-output _sidebar.md \
            --verbose

      - name: Verify build results
        run: |
          echo "🔍 Verifying build results..."
          echo "Total projects found: $(find godot-demo-projects -name project.godot | wc -l)"
          echo "Total exports created: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)"
          echo "Export directories: $(find godot-demo-projects -name exports -type d | wc -l)"
          
          # Check if any exports exist
          if [ "$(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)" -gt 0 ]; then
            echo "✅ Exports generated successfully"
            echo "Sample exports:"
            find godot-demo-projects -name index.html -path '*/exports/*' | head -5
            
            echo ""
            echo "🔍 Verifying export file structure:"
            # Check a few export directories for proper web export structure
            for export_dir in $(find godot-demo-projects -name exports -type d | head -3); do
              echo "  📁 $export_dir:"
              if [ -d "$export_dir/web" ]; then
                echo "    ✅ web/ directory exists"
                if [ -f "$export_dir/web/index.html" ]; then
                  echo "    ✅ index.html exists"
                fi
                if [ -f "$export_dir/web"/*.wasm ]; then
                  echo "    ✅ WASM files exist"
                fi
                if [ -f "$export_dir/web"/*.pck ]; then
                  echo "    ✅ PCK files exist"
                fi
              else
                echo "    ❌ web/ directory missing"
              fi
            done
          else
            echo "⚠️  No exports found"
          fi

      - name: Verify artifact contents before upload
        run: |
          echo "🔍 Final verification of artifact contents..."
          echo "Documentation files:"
          ls -la index.html _sidebar.md README.md DOCS.md docsify-embed-godot.js 2>/dev/null || echo "Some documentation files missing"
          echo ""
          echo "Projects directory structure:"
          echo "  Total godot-demo-projects subdirs: $(find godot-demo-projects -maxdepth 1 -type d | wc -l)"
          echo "  Total export directories: $(find godot-demo-projects -name exports -type d | wc -l)"
          echo "  Total web exports: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)"
          echo ""
          echo "Sample web export paths:"
          find godot-demo-projects -name index.html -path '*/exports/*' | head -5
          echo ""
          echo "✅ Artifact will include both documentation and all web exports"

      - name: Archive documentation site (SINGLE ARTIFACT)
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: |
            index.html
            _sidebar.md
            README.md
            DOCS.md
            docsify-embed-godot.js
            godot-demo-projects/
            !godot-demo-projects/**/.git
            !godot-demo-projects/**/.import
            !godot-demo-projects/**/*.tmp
            !godot-demo-projects/**/*.log
            !godot-demo-projects/**/build_cache.json
            !godot-demo-projects/**/.godot/
          retention-days: 7
          if-no-files-found: warn

      - name: Verify artifact upload
        run: |
          echo "✅ Documentation site artifact created with:"
          echo "  📄 Documentation files: index.html, _sidebar.md, README.md, DOCS.md, docsify-embed-godot.js"
          echo "  🎮 Godot projects: $(find godot-demo-projects -maxdepth 1 -type d | wc -l) directories"
          echo "  🌐 Web exports: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l) interactive games"
          echo "  📦 Total artifact size estimate: $(du -sh . | cut -f1)"
          echo ""
          echo "🚀 The deployed site will include fully interactive Godot web games!"

  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-complete
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-complete.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Download documentation site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: ./site

      - name: Verify deployment content
        run: |
          echo "🔍 Verifying content for deployment:"
          echo "  Total files: $(find ./site -type f | wc -l)"
          echo "  Export folders: $(find ./site -name exports -type d | wc -l)"
          echo "  Web exports: $(find ./site -name index.html -path '*/exports/*' | wc -l)"
          echo "  WASM files: $(find ./site -name "*.wasm" | wc -l)"
          echo "  PCK files: $(find ./site -name "*.pck" | wc -l)"
          echo ""
          
          if [ "$(find ./site -name exports -type d | wc -l)" -gt 0 ]; then
            echo "  ✅ Export folders present in deployment"
            echo "  Sample web export paths in deployment:"
            find ./site -name index.html -path '*/exports/*' | head -5 | sed 's|^./site||'
            echo ""
            echo "  🎮 Interactive web games will be available at:"
            find ./site -name index.html -path '*/exports/*' | head -3 | sed 's|^./site||' | sed 's|^|    https://gllmAR.github.io/godot-examples-docsh|'
          else
            echo "  ❌ No export folders found in deployment!"
            echo "  Available directories:"
            find ./site -maxdepth 2 -type d | head -10
          fi

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  notify:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-complete, deploy]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "🎮 Godot Examples Documentation Build Summary"
          echo "=============================================="
          echo ""
          echo "📊 Build Status: ${{ needs.build-complete.result }}"
          echo "🚀 Deploy Status: ${{ needs.deploy.result }}"
          echo "🎯 Godot Version: ${{ env.GODOT_VERSION }}"
          echo ""
          
          if [ "${{ needs.build-complete.result }}" = "success" ]; then
            echo "✅ Build completed successfully!"
          else
            echo "❌ Build failed!"
          fi
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployment completed successfully!"
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "⏭️  Deployment skipped (not main branch or build failed)"
          else
            echo "❌ Deployment failed!"
          fi
