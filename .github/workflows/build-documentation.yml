name: üéÆ Build Godot Examples Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all projects'
        required: false
        default: false
        type: boolean
      godot_version:
        description: 'Godot version to use for building'
        required: false
        default: '4.4.1'
        type: string

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.4.1' }}
  GODOT_VERSION_STABLE: ${{ github.event.inputs.godot_version || '4.4.1' }}-stable
  GODOT_TEMPLATE_VERSION: ${{ github.event.inputs.godot_version || '4.4.1' }}.stable
  PYTHON_VERSION: "3.11"

jobs:
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      build-needed: ${{ steps.changes.outputs.build-needed }}
      projects-changed: ${{ steps.changes.outputs.projects-changed }}
      docs-changed: ${{ steps.changes.outputs.docs-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          submodules: true

      - name: Initialize and update submodules
        run: |
          echo "üì¶ Ensuring submodules are properly initialized..."
          git submodule update --init --recursive --depth 1

      - name: Detect changes
        id: changes
        run: |
          echo "üîç Checking for changes that require rebuilding..."
          echo "Files changed in last commit:"
          git diff --name-only HEAD~1 || echo "No changes detected"
          
          # Check if build system or projects changed
          if git diff --name-only HEAD~1 | grep -E "(build_system/|godot-demo-projects/|\.py$|\.sh$|\.github/workflows/)" || [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build needed: YES"
          else
            echo "build-needed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build needed: NO"
          fi
          
          # Check if projects changed
          if git diff --name-only HEAD~1 | grep "godot-demo-projects/"; then
            echo "projects-changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Projects changed: YES"
          else
            echo "projects-changed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Projects changed: NO"
          fi
          
          # Check if docs changed
          if git diff --name-only HEAD~1 | grep -E "(README|\.md$|docs/)"; then
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docs changed: YES"
          else
            echo "docs-changed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Docs changed: NO"
          fi

  build-projects:
    name: üèóÔ∏è Build All Godot Projects
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-needed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Clean any existing export artifacts
        run: |
          echo "üßπ Cleaning existing export artifacts from submodules..."
          find godot-demo-projects -name "exports" -type d -exec rm -rf {} + 2>/dev/null || true
          find godot-demo-projects -name "*.wasm" -delete 2>/dev/null || true
          find godot-demo-projects -name "*.pck" -delete 2>/dev/null || true
          echo "Cleaned export artifacts to ensure fresh build"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        run: |
          echo "üéÆ Setting up Godot Engine ${GODOT_VERSION}..."
          
          # Download Godot for Linux
          GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION_STABLE}/Godot_v${GODOT_VERSION_STABLE}_linux.x86_64.zip"
          TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION_STABLE}/Godot_v${GODOT_VERSION_STABLE}_export_templates.tpz"
          
          echo "üì• Downloading Godot ${GODOT_VERSION}..."
          wget -q "${GODOT_URL}" -O godot.zip
          
          echo "üì¶ Extracting Godot..."
          unzip -q godot.zip
          
          # Make Godot executable and move to a standard location
          chmod +x Godot_v${GODOT_VERSION_STABLE}_linux.x86_64
          sudo mv Godot_v${GODOT_VERSION_STABLE}_linux.x86_64 /usr/local/bin/godot
          
          echo "üì• Downloading export templates..."
          wget -q "${TEMPLATES_URL}" -O export_templates.tpz
          
          echo "üì¶ Installing export templates..."
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}
          unzip -q export_templates.tpz -d ~/.local/share/godot/export_templates/
          mv ~/.local/share/godot/export_templates/templates/* ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
          rmdir ~/.local/share/godot/export_templates/templates
          
          echo "‚úÖ Godot setup completed"
          godot --version
          
          echo "üîç Verifying export templates..."
          ls -la ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
          
          echo "üßπ Cleaning up downloaded files..."
          rm -f godot.zip export_templates.tpz
          echo "‚úÖ Cleanup completed"

      - name: Verify Godot installation
        run: |
          echo "üîç Verifying Godot installation..."
          godot --version
          
          echo "üîç Checking export presets..."
          godot --headless --list-export-presets --quit
          
          echo "üîç Verifying export templates are installed..."
          if [ -d ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION} ]; then
            echo "‚úÖ Export templates found for version ${GODOT_TEMPLATE_VERSION}"
            ls -la ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
          else
            echo "‚ùå Export templates not found!"
            exit 1
          fi

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .build_cache
            build_system/cache
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-all-${{ hashFiles('godot-demo-projects/**/*.godot') }}
          restore-keys: |
            ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-all-
            ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-

      - name: Build all Godot projects and generate documentation
        run: |
          echo "üèóÔ∏è Building all Godot projects with web exports..."
          
          # Force clean any existing exports first
          echo "üßπ Cleaning any existing exports..."
          find godot-demo-projects -name "exports" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Test Godot export functionality first
          echo "üß™ Testing Godot export capability..."
          cd godot-demo-projects/2d/bullet_shower
          godot --headless --export-release web exports/web/index.html --quit
          if [ -f "exports/web/index.html" ] && [ -f "exports/web/index.wasm" ]; then
            echo "‚úÖ Godot export test successful"
            ls -la exports/web/
          else
            echo "‚ùå Godot export test failed"
            echo "Files in exports/web/:"
            ls -la exports/web/ || echo "No exports/web directory"
            exit 1
          fi
          cd ../../..
          
          # Clean the test export
          rm -rf godot-demo-projects/2d/bullet_shower/exports
          
          # Build all projects with the verified working export process
          python build_system/scons_build.py \
            --projects-dir godot-demo-projects \
            --godot-binary godot \
            --godot-version ${{ env.GODOT_VERSION }} \
            --jobs 4 \
            --cache-dir .build_cache \
            --continue-on-error \
            --force-rebuild \
            --verbose
          
          # Verify exports were created
          echo "üîç Verifying exports were created..."
          export_count=$(find godot-demo-projects -name "exports" -type d | wc -l)
          wasm_count=$(find godot-demo-projects -name "*.wasm" -path "*/exports/*" | wc -l)
          echo "Export directories created: $export_count"
          echo "WASM files created: $wasm_count"
          
          if [ "$wasm_count" -eq 0 ]; then
            echo "‚ùå No WASM files were created! Export process failed."
            echo "Checking first few projects for errors..."
            find godot-demo-projects -name project.godot | head -3 | while read project; do
              project_dir=$(dirname "$project")
              echo "Checking $project_dir..."
              ls -la "$project_dir/" | grep -E "(export|error|log)" || echo "No export files found"
            done
            exit 1
          fi
          
          # Generate documentation sidebar (separate from export process)
          echo "üìö Generating documentation sidebar..."
          python build_system/builders/sidebar_generator.py \
            --projects-dir godot-demo-projects \
            --output _sidebar.md \
            --verbose

      - name: Check build results
        run: |
          echo "üéØ Build Results for all projects:"
          find godot-demo-projects -name "*.wasm" -path "*/exports/*" | wc -l | xargs -I {} echo "  Built {} WASM files"
          find godot-demo-projects -name "index.html" -path "*/exports/*" | wc -l | xargs -I {} echo "  Created {} web exports"
          
          echo "üìö Documentation generated:"
          [ -f "_sidebar.md" ] && echo "  ‚úÖ Sidebar generated" || echo "  ‚ùå Sidebar missing"
          echo "  Total projects: $(find godot-demo-projects -name project.godot | wc -l)"

      - name: Debug export structure before upload
        if: always()
        run: |
          echo "üîç Debug: Examining export structure before upload..."
          echo "Export directories found:"
          find godot-demo-projects -name "exports" -type d | head -10
          echo ""
          echo "Web export index.html files:"
          find godot-demo-projects -name "index.html" -path "*/exports/*" | head -10
          echo ""
          echo "WASM files:"
          find godot-demo-projects -name "*.wasm" -path "*/exports/*" | head -10
          echo ""
          echo "Total export file count:"
          find godot-demo-projects -path "*/exports/*" -type f | wc -l

      - name: Archive export artifacts for documentation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: godot-exports
          path: |
            godot-demo-projects/
            !godot-demo-projects/**/.git
            !godot-demo-projects/**/*.tmp
            !godot-demo-projects/**/*.log
            !godot-demo-projects/**/build_cache.json
          retention-days: 7

      - name: Debug export structure before upload
        if: always()
        run: |
          echo "üîç Debugging export structure before upload:"
          echo "Exports found:"
          find godot-demo-projects -name "exports" -type d | head -10
          echo ""
          echo "Web exports found:"
          find godot-demo-projects -name "index.html" -path "*/exports/*" | head -10
          echo ""
          echo "Total export directories: $(find godot-demo-projects -name exports -type d | wc -l)"
          echo "Total web exports: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)"

      - name: Archive build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-all
          path: |
            .build_cache/build_cache.json
            build_system/logs/
          retention-days: 3

  build-documentation:
    name: üìö Build Documentation Site
    runs-on: ubuntu-latest
    needs: [detect-changes, build-projects]
    if: always() && (needs.detect-changes.outputs.build-needed == 'true' || needs.detect-changes.outputs.docs-changed == 'true')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download export artifacts  
        if: needs.build-projects.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: godot-exports
          path: ./

      - name: Debug downloaded artifacts
        if: needs.build-projects.result == 'success'
        run: |
          echo "üîç Debug: Examining downloaded artifacts..."
          echo "Directory structure after download:"
          find . -name "exports" -type d | head -10
          echo ""
          echo "Web exports found:"
          find . -name "index.html" -path "*/exports/*" | head -10
          echo ""
          echo "WASM files found:"
          find . -name "*.wasm" -path "*/exports/*" | head -10
          echo ""
          echo "Total files in godot-demo-projects:"
          find ./godot-demo-projects -type f | wc -l

      - name: Debug artifact structure
        if: needs.build-projects.result == 'success'
        run: |
          echo "üîç Debugging downloaded artifact structure:"
          echo "Current directory contents:"
          ls -la ./
          echo ""
          echo "Looking for godot-demo-projects directory:"
          find . -name "godot-demo-projects" -type d || echo "No godot-demo-projects directory found"
          echo ""
          echo "Looking for any exports directories:"
          find . -name "exports" -type d || echo "No exports directories found"
          echo ""
          echo "Looking for any index.html files:"
          find . -name "index.html" || echo "No index.html files found"
          echo ""
          echo "Full directory tree (first 3 levels):"
          find . -maxdepth 3 -type d | sort

      - name: Setup Godot for export checking
        if: needs.build-projects.result == 'success'
        run: |
          echo "üéÆ Setting up Godot for export verification..."
          
          # Download Godot for Linux (lightweight setup for checking exports)
          GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION_STABLE}/Godot_v${GODOT_VERSION_STABLE}_linux.x86_64.zip"
          
          echo "ÔøΩ Downloading Godot ${GODOT_VERSION}..."
          wget -q "${GODOT_URL}" -O godot.zip
          
          echo "ÔøΩ Extracting Godot..."
          unzip -q godot.zip
          
          # Make Godot executable and move to a standard location
          chmod +x Godot_v${GODOT_VERSION_STABLE}_linux.x86_64
          sudo mv Godot_v${GODOT_VERSION_STABLE}_linux.x86_64 /usr/local/bin/godot
          
          echo "‚úÖ Godot setup completed"
          godot --version
          
          echo "üßπ Cleaning up..."
          rm -f godot.zip

      - name: Build all projects if needed
        if: needs.build-projects.result != 'success'
        run: |
          echo "üèóÔ∏è Building projects in documentation job since build job failed or was skipped..."
          
          # Build all projects and generate documentation in one integrated step
          python build_system/scons_build.py \
            --projects-dir godot-demo-projects \
            --godot-binary godot \
            --godot-version ${{ env.GODOT_VERSION }} \
            --jobs 4 \
            --cache-dir .build_cache \
            --continue-on-error \
            --generate-docs \
            --docs-output _sidebar.md \
            --verbose

      - name: Process embeds for documentation
        run: |
          echo "üéÆ Processing embed markers for documentation site..."
          
          # Ensure embed markers are present in README files (markers only, not HTML)
          echo "üîÑ Adding embed markers to README files..."
          python build_system/builders/embed_injector.py \
            --projects-dir godot-demo-projects \
            --in-place \
            --verbose
          
          echo "üìä Verifying embed markers:"
          marker_count=$(grep -r "<!-- embed-{" godot-demo-projects/*/README.md | wc -l)
          path_marker_count=$(grep -r "<!-- embed-{\$PATH}" godot-demo-projects/*/README.md | wc -l)
          echo "  README files with embed markers: $marker_count"
          echo "  README files with \$PATH markers: $path_marker_count"
          
          if [ "$((marker_count + path_marker_count))" -gt 0 ]; then
            echo "  ‚úÖ Embed markers present - JavaScript plugin will handle rendering"
            echo "  Sample markers:"
            grep -r "<!-- embed-{" godot-demo-projects/*/README.md | head -3 | sed 's|^|    |'
          else
            echo "  ‚ö†Ô∏è  No embed markers found"
          fi

      - name: Verify documentation structure
        run: |
          echo "üìä Documentation Statistics:"
          echo "  Total projects: $(find godot-demo-projects -name project.godot | wc -l)"
          echo "  With exports: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)"
          echo "  README files: $(find godot-demo-projects -name README.md | wc -l)"
          echo "  Sidebar entries: $(grep -c 'üéÆ\|üìÅ' _sidebar.md)"
          
          echo ""
          echo "üîç Verifying exports are present for deployment:"
          export_count=$(find godot-demo-projects -name "exports" -type d | wc -l)
          web_count=$(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)
          wasm_count=$(find godot-demo-projects -name "*.wasm" -path '*/exports/*' | wc -l)
          
          echo "  Export folders: $export_count"
          echo "  Web exports: $web_count" 
          echo "  WASM files: $wasm_count"
          
          # Calculate approximate size
          if [ "$wasm_count" -gt 0 ]; then
            echo ""
            echo "üì¶ Size estimation:"
            sample_size=$(find godot-demo-projects -name "*.wasm" -path "*/exports/*" -exec du -b {} \; | head -5 | awk '{sum+=$1} END {print sum/NR}')
            if [ -n "$sample_size" ]; then
              total_mb=$((wasm_count * sample_size / 1024 / 1024))
              echo "  Estimated total size: ${total_mb}MB (${wasm_count} WASM files)"
            fi
          fi
          
          if [ "$web_count" -gt 0 ]; then
            echo "  ‚úÖ Web exports found - will be included in site"
            echo "  Sample export URLs that will be available:"
            find godot-demo-projects -name index.html -path '*/exports/*' | head -3 | sed 's|^|    /|'
          else
            echo "  ‚ö†Ô∏è  No web exports found - games won't be playable"
            echo "  Continuing with documentation build for debugging..."
          fi

      - name: Build site with docsify
        run: |
          echo "üåê Building static documentation site..."
          
          # Verify essential files exist
          echo "üîç Verifying essential documentation files..."
          
          if [ ! -f "index.html" ]; then
            echo "‚ùå index.html not found!"
            exit 1
          fi
          
          if [ ! -f "docsify-embed-godot.js" ]; then
            echo "‚ùå docsify-embed-godot.js not found!"
            exit 1
          fi
          
          if [ ! -f "_sidebar.md" ]; then
            echo "‚ùå _sidebar.md not found!"
            exit 1
          fi
          
          echo "‚úÖ All essential files present"
          
          # Install docsify-cli if needed for static generation
          npm install -g docsify-cli
          
          # Verify index.html exists
          if [ ! -f "index.html" ]; then
            echo "Creating index.html for docsify"
            cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>Godot Examples Documentation</title>
            <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
            <meta name="description" content="Interactive documentation for Godot Engine demo projects">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
            <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css">
          </head>
          <body>
            <div id="app"></div>
            <script>
              window.$docsify = {
                name: 'Godot Examples',
                repo: 'https://github.com/godotengine/godot-demo-projects',
                loadSidebar: true,
                subMaxLevel: 2,
                search: 'auto',
                copyCode: {
                  buttonText : 'Copy to clipboard',
                  errorText  : 'Error',
                  successText: 'Copied'
                }
              }
            </script>
            <script src="//cdn.jsdelivr.net/npm/docsify@4"></script>
            <script src="//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js"></script>
            <script src="//cdn.jsdelivr.net/npm/docsify-copy-code@2"></script>
          </body>
          </html>
          EOF
          fi

      - name: Archive documentation site
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: |
            index.html
            _sidebar.md
            README.md
            DOCS.md
            docsify-embed-godot.js
            godot-demo-projects/
            !godot-demo-projects/**/.git
            !godot-demo-projects/**/*.tmp
            !godot-demo-projects/**/*.log
          retention-days: 30

  deploy:
    name: üöÄ Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-projects, build-documentation]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-documentation.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Download documentation site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: ./site

      - name: Verify deployment content
        run: |
          echo "üîç Verifying content being deployed to GitHub Pages:"
          echo "  Total files: $(find ./site -type f | wc -l)"
          echo "  Export folders: $(find ./site -name exports -type d | wc -l)"
          echo "  Web exports: $(find ./site -name index.html -path '*/exports/*' | wc -l)"
          
          if [ "$(find ./site -name exports -type d | wc -l)" -gt 0 ]; then
            echo "  ‚úÖ Export folders present in deployment"
            echo "  Sample exports in deployment:"
            find ./site -name index.html -path '*/exports/*' | head -3 | sed 's|^./site||'
          else
            echo "  ‚ùå No export folders found in deployment!"
            echo "  Site structure:"
            ls -la ./site/
          fi

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [detect-changes, build-projects, build-documentation, deploy]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## üéÆ Godot Examples Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Detect Changes | ${{ needs.detect-changes.result }} | Build needed: ${{ needs.detect-changes.outputs.build-needed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Projects | ${{ needs.build-projects.result }} | Projects: ${{ needs.build-projects.result == 'success' && '‚úÖ Built successfully' || '‚ùå Build failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Documentation | ${{ needs.build-documentation.result }} | Docs: ${{ needs.build-documentation.result == 'success' && '‚úÖ Generated successfully' || '‚ùå Generation failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} | Pages: ${{ needs.deploy.result == 'success' && 'üöÄ Deployed successfully' || needs.deploy.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Deploy failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üåê **Documentation is live!** Check the [GitHub Pages deployment](https://github.com/${{ github.repository }}/deployments)" >> $GITHUB_STEP_SUMMARY
          fi
