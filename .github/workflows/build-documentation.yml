name: üéÆ Build Godot Examples Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all projects'
        required: false
        default: false
        type: boolean
      godot_version:
        description: 'Godot version to use for building'
        required: false
        default: '4.5-beta1'
        type: string

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GODOT_VERSION: ${{ github.event.inputs.godot_version || '4.5-beta1' }}
  GODOT_VERSION_STABLE: ${{ github.event.inputs.godot_version || '4.5-beta1' }}
  PYTHON_VERSION: "3.11"

jobs:
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      build-needed: ${{ steps.changes.outputs.build-needed }}
      projects-changed: ${{ steps.changes.outputs.projects-changed }}
      docs-changed: ${{ steps.changes.outputs.docs-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          submodules: true

      - name: Initialize and update submodules
        run: |
          echo "üì¶ Ensuring submodules are properly initialized..."
          git submodule update --init --recursive --depth 1

      - name: Detect changes
        id: changes
        run: |
          echo "üîç Checking for changes that require rebuilding..."
          
          # Force rebuild if requested
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "üîÑ Force rebuild requested"
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "projects-changed=true" >> $GITHUB_OUTPUT
            echo "docs-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for changes in project files or documentation
          if git diff --name-only HEAD~1 HEAD | grep -E "(godot-demo-projects|build_system|\.py$|\.sh$|\.yml$|\.md$|index\.html)" > /dev/null; then
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "projects-changed=true" >> $GITHUB_OUTPUT
            echo "docs-changed=true" >> $GITHUB_OUTPUT
          else
            echo "build-needed=false" >> $GITHUB_OUTPUT
            echo "projects-changed=false" >> $GITHUB_OUTPUT
            echo "docs-changed=false" >> $GITHUB_OUTPUT
          fi

  build-complete:
    name: üèóÔ∏è Build Projects & Documentation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-needed == 'true' || needs.detect-changes.outputs.docs-changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Clean any existing export artifacts
        run: |
          echo "üßπ Cleaning existing export artifacts from submodules..."
          find godot-demo-projects -name "exports" -type d -exec rm -rf {} + 2>/dev/null || true
          find godot-demo-projects -name "*.wasm" -delete 2>/dev/null || true
          find godot-demo-projects -name "*.pck" -delete 2>/dev/null || true
          echo "Cleaned export artifacts to ensure fresh build"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        run: |
          echo "üéÆ Setting up Godot Engine ${GODOT_VERSION}..."
          
          # Calculate the correct template version format
          if [[ "${GODOT_VERSION}" == *"-beta"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-beta/.beta}"
          elif [[ "${GODOT_VERSION}" == *"-alpha"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-alpha/.alpha}"
          elif [[ "${GODOT_VERSION}" == *"-rc"* ]]; then
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION/-rc/.rc}"
          else
            GODOT_TEMPLATE_VERSION="${GODOT_VERSION}"
          fi
          
          echo "üìã Template version format: ${GODOT_TEMPLATE_VERSION}"
          
          # Download URLs based on version type
          if [[ "${GODOT_VERSION}" == *"beta"* ]] || [[ "${GODOT_VERSION}" == *"alpha"* ]] || [[ "${GODOT_VERSION}" == *"rc"* ]]; then
            GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
            TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_export_templates.tpz"
          else
            GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip"
            TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
          fi
          
          # Download and install Godot
          echo "üì• Downloading Godot ${GODOT_VERSION}..."
          wget -q "${GODOT_URL}" -O godot.zip
          unzip -q godot.zip
          chmod +x Godot_v${GODOT_VERSION}_linux.x86_64
          sudo mv Godot_v${GODOT_VERSION}_linux.x86_64 /usr/local/bin/godot
          
          # Download and install export templates
          echo "üì• Downloading export templates..."
          wget -q "${TEMPLATES_URL}" -O export_templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}
          unzip -q export_templates.tpz -d ~/.local/share/godot/export_templates/
          mv ~/.local/share/godot/export_templates/templates/* ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
          rmdir ~/.local/share/godot/export_templates/templates
          
          # Cleanup
          rm -f godot.zip export_templates.tpz
          
          echo "‚úÖ Godot setup completed"
          godot --version

      - name: Build all projects
        run: |
          echo "üèóÔ∏è Building all Godot projects with optimized settings..."
          
          # Use build system to export all projects
          python build_system/scons_build.py \
            --projects-dir godot-demo-projects \
            --export-type web \
            --parallel-jobs 4 \
            --godot-version ${{ env.GODOT_VERSION }} \
            --max-parallel-processes 8 \
            --verbose

      - name: Generate documentation
        run: |
          echo "üìö Generating documentation and sidebar..."
          
          # Generate documentation, sidebar, and inject embeds
          python build_system/scons_build.py \
            --generate-docs \
            --projects-dir godot-demo-projects \
            --docs-output _sidebar.md \
            --verbose

      - name: Verify build results
        run: |
          echo "üîç Verifying build results..."
          echo "Total projects found: $(find godot-demo-projects -name project.godot | wc -l)"
          echo "Total exports created: $(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)"
          echo "Export directories: $(find godot-demo-projects -name exports -type d | wc -l)"
          
          # Check if any exports exist
          if [ "$(find godot-demo-projects -name index.html -path '*/exports/*' | wc -l)" -gt 0 ]; then
            echo "‚úÖ Exports generated successfully"
            echo "Sample exports:"
            find godot-demo-projects -name index.html -path '*/exports/*' | head -5
          else
            echo "‚ö†Ô∏è  No exports found"
          fi

      - name: Archive documentation site (SINGLE ARTIFACT)
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: |
            index.html
            _sidebar.md
            README.md
            DOCS.md
            docsify-embed-godot.js
            godot-demo-projects/
            !godot-demo-projects/**/.git
            !godot-demo-projects/**/*.tmp
            !godot-demo-projects/**/*.log
            !godot-demo-projects/**/build_cache.json
          retention-days: 7

  deploy:
    name: üöÄ Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-complete
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-complete.result == 'success'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Download documentation site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: ./site

      - name: Verify deployment content
        run: |
          echo "üîç Verifying content for deployment:"
          echo "  Total files: $(find ./site -type f | wc -l)"
          echo "  Export folders: $(find ./site -name exports -type d | wc -l)"
          echo "  Web exports: $(find ./site -name index.html -path '*/exports/*' | wc -l)"
          
          if [ "$(find ./site -name exports -type d | wc -l)" -gt 0 ]; then
            echo "  ‚úÖ Export folders present in deployment"
          else
            echo "  ‚ùå No export folders found in deployment!"
          fi

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  notify:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-complete, deploy]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "üéÆ Godot Examples Documentation Build Summary"
          echo "=============================================="
          echo ""
          echo "üìä Build Status: ${{ needs.build-complete.result }}"
          echo "üöÄ Deploy Status: ${{ needs.deploy.result }}"
          echo "üéØ Godot Version: ${{ env.GODOT_VERSION }}"
          echo ""
          
          if [ "${{ needs.build-complete.result }}" = "success" ]; then
            echo "‚úÖ Build completed successfully!"
          else
            echo "‚ùå Build failed!"
          fi
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è  Deployment skipped (not main branch or build failed)"
          else
            echo "‚ùå Deployment failed!"
          fi
