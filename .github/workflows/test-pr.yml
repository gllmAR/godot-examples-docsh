name: 🧪 Test Pull Request

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GODOT_VERSION: "4.3"
  PYTHON_VERSION: "3.11"

jobs:
  test-build-system:
    name: 🔧 Test Build System
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        uses: lihop/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          export-templates: true

      - name: Run build system tests
        run: |
          cd godot-ci-build-system
          python test_build_system.py

      - name: Test dependency checker
        run: |
          python godot-ci-build-system/tools/dependency_checker.py

      - name: Lint Python code
        run: |
          python -m pip install flake8
          flake8 godot-ci-build-system/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 godot-ci-build-system/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Upload coverage reports
        if: false  # Disabled until we have proper test coverage setup
        uses: codecov/codecov-action@v3
        with:
          file: ./godot-ci-build-system/coverage.xml
          flags: build-system
          name: build-system-coverage

  test-sample-build:
    name: 🎮 Test Sample Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Godot
        uses: lihop/setup-godot@v2
        with:
          version: ${{ env.GODOT_VERSION }}
          export-templates: true

      - name: Test build on sample projects
        run: |
          # Test build on a small subset of projects
          echo "Testing build system on sample projects..."
          
          # Create a temporary projects directory with just a few projects
          mkdir -p test-projects
          
          # Copy a few representative projects for testing
          if [ -d "godot-demo-projects/2d/platformer" ]; then
            cp -r godot-demo-projects/2d/platformer test-projects/
          fi
          
          if [ -d "godot-demo-projects/gui/control_gallery" ]; then
            cp -r godot-demo-projects/gui/control_gallery test-projects/
          fi
          
          # Run the universal build system on test projects
          python build_system/build.py build \
            --projects-dir test-projects \
            --jobs 1 \
            --verbose \
            --force-rebuild

      - name: Verify test build results
        run: |
          echo "🔍 Checking test build results..."
          
          # Check if any exports were created
          EXPORT_COUNT=$(find test-projects -name "*.wasm" -path "*/exports/*" | wc -l)
          echo "Found $EXPORT_COUNT WASM files"
          
          if [ "$EXPORT_COUNT" -gt 0 ]; then
            echo "✅ Test build successful - projects exported to WASM"
          else
            echo "❌ Test build failed - no WASM exports found"
            exit 1
          fi

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  validate-config:
    name: ⚙️ Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate build configuration
        run: |
          python -c "
          import sys
          sys.path.append('godot-ci-build-system')
          from config.build_config import *
          print('✅ Build configuration is valid')
          "

      - name: Check requirements.txt
        run: |
          python -m pip install --dry-run -r requirements.txt
          echo "✅ Requirements file is valid"

      - name: Validate shell scripts
        run: |
          # Install shellcheck if available
          if command -v shellcheck &> /dev/null; then
            echo "Running shellcheck on shell scripts..."
            find . -name "*.sh" -exec shellcheck {} \;
          else
            echo "⚠️ shellcheck not available, skipping shell script validation"
          fi
          
          # Basic syntax check
          bash -n build.sh
          echo "✅ Shell scripts have valid syntax"

  pr-summary:
    name: 📊 PR Summary
    runs-on: ubuntu-latest
    needs: [test-build-system, test-sample-build, security-scan, validate-config]
    if: always()
    steps:
      - name: Generate PR summary
        run: |
          echo "## 🧪 Pull Request Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build System Tests | ${{ needs.test-build-system.result }} | Unit tests and linting |" >> $GITHUB_STEP_SUMMARY
          echo "| Sample Build Test | ${{ needs.test-sample-build.result }} | End-to-end build verification |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Config Validation | ${{ needs.validate-config.result }} | Configuration and syntax checks |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.test-build-system.result }}" == "success" ] && [ "${{ needs.test-sample-build.result }}" == "success" ] && [ "${{ needs.validate-config.result }}" == "success" ]; then
            echo "🎉 **All tests passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed.** Please review the failing checks before merging." >> $GITHUB_STEP_SUMMARY
          fi
